// lib/translationUtils.ts
import { TFunction } from 'react-i18next';

/**
 * Translate appointment data using database Arabic fields and fallback translations
 * @param appointmentData - Object containing appointment details with potential Arabic fields
 * @param t - Translation function from useTranslation
 * @param currentLanguage - Current language ('en' or 'ar')
 * @returns Object with translated appointment details
 */
export const translateAppointmentData = (
    appointmentData: {
        clinicName?: string;
        clinicNameAr?: string;
        doctorName?: string;
        doctorNameAr?: string;
        specialty?: string;
        specialtyAr?: string;
        appointmentDay?: string;
        appointmentTime?: string;
    },
    t: TFunction,
    currentLanguage: string
) => {
    console.log('üîÑ Translating appointment data:', {
        currentLanguage,
        doctorName: appointmentData.doctorName,
        specialty: appointmentData.specialty,
        appointmentDay: appointmentData.appointmentDay
    });
    const getTranslatedValue = (englishValue: string | undefined, arabicValue: string | undefined, fallbackKey?: string): string => {
        if (!englishValue) return '';

        console.log('üîÑ Translating value:', { englishValue, arabicValue, fallbackKey, currentLanguage });

        if (currentLanguage === 'ar') {
            // Try Arabic database field first
            if (arabicValue && arabicValue.trim()) {
                console.log('‚úÖ Using Arabic database field:', arabicValue);
                return arabicValue;
            }

            // Fallback to translation key
            if (fallbackKey) {
                const translation = t(fallbackKey, { defaultValue: null });
                console.log('üîç Trying translation key:', fallbackKey, '‚Üí', translation);
                if (translation && translation !== fallbackKey) {
                    console.log('‚úÖ Using translation key:', translation);
                    return translation;
                }
            }

            // Try general medical term translation first
            const medicalTranslation = getMedicalTermTranslation(englishValue, t, currentLanguage);
            console.log('üîç Medical translation:', englishValue, '‚Üí', medicalTranslation);
            if (medicalTranslation !== englishValue) {
                console.log('‚úÖ Using medical translation:', medicalTranslation);
                return medicalTranslation;
            }

            // Always try doctor name translation for any value that looks like a name
            const doctorTranslation = translateDoctorName(englishValue, t, currentLanguage);
            console.log('üîç Doctor translation:', englishValue, '‚Üí', doctorTranslation);
            if (doctorTranslation !== englishValue) {
                console.log('‚úÖ Using doctor translation:', doctorTranslation);
                return doctorTranslation;
            }

            console.log('‚ö†Ô∏è No translation found, using original:', englishValue);
            return medicalTranslation;
        }

        // For English, return the English value
        console.log('üá∫üá∏ English mode, returning original:', englishValue);
        return englishValue;
    };

    const result = {
        clinicName: getTranslatedValue(
            appointmentData.clinicName,
            appointmentData.clinicNameAr,
            `payment.${appointmentData.clinicName?.toLowerCase().replace(/\s+/g, '')}`
        ),
        doctorName: getTranslatedValue(
            appointmentData.doctorName,
            appointmentData.doctorNameAr,
            `payment.${appointmentData.doctorName?.toLowerCase().replace(/\s+/g, '')}`
        ),
        specialty: getTranslatedValue(
            appointmentData.specialty,
            appointmentData.specialtyAr,
            `payment.${appointmentData.specialty?.toLowerCase().replace(/\s+/g, '')}`
        ),
        appointmentDay: getTranslatedValue(
            appointmentData.appointmentDay,
            undefined,
            `payment.${appointmentData.appointmentDay?.toLowerCase()}`
        ),
        appointmentTime: appointmentData.appointmentTime || '', // Time usually doesn't need translation
    };

    console.log('‚úÖ Translation result:', result);
    return result;
};

/**
 * Translate individual values using database Arabic fields and fallback translations
 * @param englishValue - English value
 * @param arabicValue - Arabic value from database (optional)
 * @param t - Translation function
 * @param currentLanguage - Current language
 * @param fallbackKey - Optional fallback translation key
 * @returns Translated value
 */
export const translateValue = (
    englishValue: string | undefined,
    arabicValue: string | undefined,
    t: TFunction,
    currentLanguage: string,
    fallbackKey?: string
): string => {
    if (!englishValue) return '';

    if (currentLanguage === 'ar') {
        // Try Arabic database field first
        if (arabicValue && arabicValue.trim()) {
            return arabicValue;
        }

        // Fallback to translation key
        if (fallbackKey) {
            const translation = t(fallbackKey, { defaultValue: null });
            if (translation && translation !== fallbackKey) {
                return translation;
            }
        }

        // Try general medical term translation first
        const medicalTranslation = getMedicalTermTranslation(englishValue, t, currentLanguage);
        if (medicalTranslation !== englishValue) {
            return medicalTranslation;
        }

        // For doctor names, try the specialized doctor name translation
        if (fallbackKey && fallbackKey.includes('payment.')) {
            const doctorTranslation = translateDoctorName(englishValue, t, currentLanguage);
            if (doctorTranslation !== englishValue) {
                return doctorTranslation;
            }
        }

        return medicalTranslation;
    }

    // For English, return the English value
    return englishValue;
};

/**
 * Translate appointment details (clinic, doctor, specialty, day, time)
 * @param appointmentData - Object containing appointment details
 * @param t - Translation function
 * @param currentLanguage - Current language
 * @returns Object with translated appointment details
 */
export const translateAppointmentDetails = (
    appointmentData: {
        clinicName?: string;
        doctorName?: string;
        specialty?: string;
        appointmentDay?: string;
        appointmentTime?: string;
    },
    t: TFunction,
    currentLanguage: string
) => {
    return {
        clinicName: translateDynamicContent(appointmentData.clinicName || '', t, currentLanguage),
        doctorName: translateDynamicContent(appointmentData.doctorName || '', t, currentLanguage),
        specialty: translateDynamicContent(appointmentData.specialty || '', t, currentLanguage),
        appointmentDay: translateDynamicContent(appointmentData.appointmentDay || '', t, currentLanguage),
        appointmentTime: appointmentData.appointmentTime || '', // Time usually doesn't need translation
    };
};

/**
 * Get translation for common medical terms
 * @param term - Medical term to translate
 * @param t - Translation function
 * @param currentLanguage - Current language
 * @returns Translated term
 */
export const getMedicalTermTranslation = (
    term: string,
    t: TFunction,
    currentLanguage: string
): string => {
    if (!term || typeof term !== 'string') return term;

    console.log('üè• Translating medical term:', { term, currentLanguage });

    const normalizedTerm = term.toLowerCase().trim();
    console.log('üîç Normalized medical term:', normalizedTerm);

    // First, try exact match with translation keys
    const medicalTerms: Record<string, string> = {
        // Common specialties
        'dentist': 'payment.dentist',
        'dentistry': 'payment.dentistSpecialty',
        'pediatrics': 'payment.pediatrics',
        'cardiology': 'payment.cardiology',
        'dermatology': 'payment.dermatology',
        'neurology': 'payment.neurology',
        'orthopedics': 'payment.orthopedics',
        'psychiatry': 'payment.psychiatry',
        'gynecology': 'payment.gynecology',
        'urology': 'payment.urology',
        'ophthalmology': 'payment.ophthalmology',
        'radiology': 'payment.radiology',
        'surgery': 'payment.surgery',
        'emergency': 'payment.emergency',
        'emergency medicine': 'payment.emergency',
        'family': 'payment.family',
        'family medicine': 'payment.family',
        'internal': 'payment.internal',
        'internal medicine': 'payment.internal',
        'general': 'payment.general',
        'general medicine': 'payment.general',
        'anesthesiology': 'payment.anesthesiology',
        'oncology': 'payment.oncology',
        'endocrinology': 'payment.endocrinology',
        'pulmonology': 'payment.pulmonology',
        'gastroenterology': 'payment.gastroenterology',
        'nephrology': 'payment.nephrology',
        'rheumatology': 'payment.rheumatology',
        'hematology': 'payment.hematology',
        'immunology': 'payment.immunology',
        'pathology': 'payment.pathology',
        'pharmacology': 'payment.pharmacology',
        'physiotherapy': 'payment.physiotherapy',
        'physical therapy': 'payment.physiotherapy',
        'laboratory': 'payment.laboratory',

        // Days
        'monday': 'payment.monday',
        'tuesday': 'payment.tuesday',
        'wednesday': 'payment.wednesday',
        'thursday': 'payment.thursday',
        'friday': 'payment.friday',
        'saturday': 'payment.saturday',
        'sunday': 'payment.sunday',

        // Common doctor names
        'bishara babish': 'payment.bisharaBabish',
        'ahmed mohammed': 'payment.ahmedMohammed',
        'fatima ali': 'payment.fatimaAli',
        'omar hassan': 'payment.omarHassan',
        'mariam ibrahim': 'payment.mariamIbrahim',
        'issa handal': 'payment.issaHandal',

        // Common clinic names
        'bethlehem med center': 'payment.bethlehemMedCenter',
        'al-makassed hospital': 'payment.alMakassedHospital',
        'hadassah hospital': 'payment.hadassahHospital',
        'al-shifa hospital': 'payment.alShifaHospital',
        'ramallah hospital': 'payment.ramallahHospital',
    };

    // Try exact match first
    const exactMatch = medicalTerms[normalizedTerm];
    if (exactMatch) {
        const translation = t(exactMatch, { defaultValue: null });
        if (translation && translation !== exactMatch) {
            return translation;
        }
    }

    // Try partial matches for specialties (e.g., "cardiology" matches "cardio")
    if (currentLanguage === 'ar') {
        for (const [key, translationKey] of Object.entries(medicalTerms)) {
            if (normalizedTerm.includes(key) || key.includes(normalizedTerm)) {
                const translation = t(translationKey, { defaultValue: null });
                if (translation && translation !== translationKey) {
                    return translation;
                }
            }
        }
    }

    // If no translation found, return original term
    console.log('üè• Medical term translation result:', { original: term, translated: term });
    return term;
};

/**
 * Translate doctor names using common Arabic name patterns
 * @param doctorName - Doctor's name in English
 * @param t - Translation function
 * @param currentLanguage - Current language
 * @returns Translated doctor name
 */
export const translateDoctorName = (
    doctorName: string,
    t: TFunction,
    currentLanguage: string
): string => {
    if (!doctorName || typeof doctorName !== 'string') return doctorName;

    console.log('üë®‚Äç‚öïÔ∏è Translating doctor name:', { doctorName, currentLanguage });

    if (currentLanguage !== 'ar') {
        console.log('üá∫üá∏ English mode, returning original doctor name:', doctorName);
        return doctorName; // Return English name for English language
    }

    const normalizedName = doctorName.toLowerCase().trim();
    console.log('üîç Normalized name:', normalizedName);

    // Try exact match first
    const exactMatch = medicalTerms[normalizedName];
    if (exactMatch) {
        const translation = t(exactMatch, { defaultValue: null });
        if (translation && translation !== exactMatch) {
            return translation;
        }
    }

    // For Arabic language, try to transliterate common English names to Arabic
    const nameTranslations: Record<string, string> = {
        // Common first names
        'john': 'ÿ¨ŸàŸÜ',
        'jane': 'ÿ¨ŸäŸÜ',
        'michael': 'ŸÖÿßŸäŸÉŸÑ',
        'sarah': 'ÿ≥ÿßÿ±ÿ©',
        'david': 'ÿØÿßŸàÿØ',
        'mary': 'ŸÖÿ±ŸäŸÖ',
        'robert': 'ÿ±Ÿàÿ®ÿ±ÿ™',
        'lisa': 'ŸÑŸäÿ≤ÿß',
        'james': 'ÿ¨ŸäŸÖÿ≥',
        'anna': 'ÿ¢ŸÜÿß',
        'william': 'ŸàŸäŸÑŸäÿßŸÖ',
        'emma': 'ÿ•ŸäŸÖÿß',
        'chris': 'ŸÉÿ±Ÿäÿ≥',
        'linda': 'ŸÑŸäŸÜÿØÿß',
        'mark': 'ŸÖÿßÿ±ŸÉ',
        'susan': 'ÿ≥Ÿàÿ≤ÿßŸÜ',
        'paul': 'ÿ®ŸàŸÑ',
        'jennifer': 'ÿ¨ŸäŸÜŸäŸÅÿ±',
        'thomas': 'ÿ™ŸàŸÖÿßÿ≥',
        'karen': 'ŸÉÿßÿ±ŸäŸÜ',
        'steven': 'ÿ≥ÿ™ŸäŸÅŸÜ',
        'nancy': 'ŸÜÿßŸÜÿ≥Ÿä',
        'daniel': 'ÿØÿßŸÜŸäÿßŸÑ',
        'betty': 'ÿ®Ÿäÿ™Ÿä',
        'kevin': 'ŸÉŸäŸÅŸÜ',
        'helen': 'ŸáŸäŸÑŸäŸÜ',
        'brian': 'ÿ®ÿ±ÿßŸäŸÜ',
        'sandra': 'ÿ≥ÿßŸÜÿØÿ±ÿß',
        'edward': 'ÿ•ÿØŸàÿßÿ±ÿØ',
        'donna': 'ÿØŸàŸÜÿß',
        'ronald': 'ÿ±ŸàŸÜÿßŸÑÿØ',
        'carol': 'ŸÉÿßÿ±ŸàŸÑ',
        'george': 'ÿ¨Ÿàÿ±ÿ¨',
        'ruth': 'ÿ±Ÿàÿ´',
        'kenneth': 'ŸÉŸäŸÜŸäÿ´',
        'sharon': 'ÿ¥ÿßÿ±ŸàŸÜ',
        'anthony': 'ÿ£ŸÜÿ™ŸàŸÜŸä',
        'michelle': 'ŸÖŸäÿ¥ŸäŸÑ',
        'charles': 'ÿ™ÿ¥ÿßÿ±ŸÑÿ≤',
        'laura': 'ŸÑŸàÿ±ÿß',
        'ahmed': 'ÿ£ÿ≠ŸÖÿØ',
        'mohammed': 'ŸÖÿ≠ŸÖÿØ',
        'ali': 'ÿπŸÑŸä',
        'omar': 'ÿπŸÖÿ±',
        'hassan': 'ÿ≠ÿ≥ŸÜ',
        'ibrahim': 'ÿ•ÿ®ÿ±ÿßŸáŸäŸÖ',
        'youssef': 'ŸäŸàÿ≥ŸÅ',
        'khalil': 'ÿÆŸÑŸäŸÑ',
        'sami': 'ÿ≥ÿßŸÖŸä',
        'rami': 'ÿ±ÿßŸÖŸä',
        'tariq': 'ÿ∑ÿßÿ±ŸÇ',
        'nasser': 'ŸÜÿßÿµÿ±',
        'fadi': 'ŸÅÿßÿØŸä',
        'saleh': 'ÿµÿßŸÑÿ≠',
        'majed': 'ŸÖÿßÿ¨ÿØ',
        'fouad': 'ŸÅÿ§ÿßÿØ',
        'bishara': 'ÿ®ÿ¥ÿßÿ±ÿ©',
        'babish': 'ÿ®ÿßÿ®Ÿäÿ¥',
        'issa': 'ÿπŸäÿ≥Ÿâ',
        'handal': 'ÿ≠ŸÜÿØŸÑ',

        // Common last names
        'smith': 'ÿ≥ŸÖŸäÿ´',
        'johnson': 'ÿ¨ŸàŸÜÿ≥ŸàŸÜ',
        'williams': 'ŸàŸäŸÑŸäÿßŸÖÿ≤',
        'brown': 'ÿ®ÿ±ÿßŸàŸÜ',
        'jones': 'ÿ¨ŸàŸÜÿ≤',
        'garcia': 'ÿ∫ÿßÿ±ÿ≥Ÿäÿß',
        'miller': 'ŸÖŸäŸÑÿ±',
        'davis': 'ÿØŸäŸÅŸäÿ≥',
        'rodriguez': 'ÿ±ŸàÿØÿ±Ÿäÿ∫Ÿäÿ≤',
        'martinez': 'ŸÖÿßÿ±ÿ™ŸäŸÜŸäÿ≤',
        'hernandez': 'ŸáŸäÿ±ŸÜÿßŸÜÿØŸäÿ≤',
        'lopez': 'ŸÑŸàÿ®Ÿäÿ≤',
        'gonzalez': 'ÿ∫ŸàŸÜÿ≤ÿßŸÑŸäÿ≤',
        'wilson': 'ŸàŸäŸÑÿ≥ŸàŸÜ',
        'anderson': 'ÿ£ŸÜÿØÿ±ÿ≥ŸàŸÜ',
        'thomas': 'ÿ™ŸàŸÖÿßÿ≥',
        'taylor': 'ÿ™ÿßŸäŸÑŸàÿ±',
        'moore': 'ŸÖŸàÿ±',
        'jackson': 'ÿ¨ÿßŸÉÿ≥ŸàŸÜ',
        'martin': 'ŸÖÿßÿ±ÿ™ŸÜ',
        'lee': 'ŸÑŸä',
        'perez': 'ÿ®Ÿäÿ±Ÿäÿ≤',
        'thompson': 'ÿ∑ŸàŸÖÿ≥ŸàŸÜ',
        'white': 'ŸàÿßŸäÿ™',
        'harris': 'Ÿáÿßÿ±Ÿäÿ≥',
        'sanchez': 'ÿ≥ÿßŸÜÿ¥Ÿäÿ≤',
        'clark': 'ŸÉŸÑÿßÿ±ŸÉ',
        'ramirez': 'ÿ±ÿßŸÖŸäÿ±Ÿäÿ≤',
        'lewis': 'ŸÑŸàŸäÿ≥',
        'robinson': 'ÿ±Ÿàÿ®ŸÜÿ≥ŸàŸÜ',
        'walker': 'ŸàŸàŸÉÿ±',
        'young': 'ŸäŸàŸÜÿ∫',
        'allen': 'ÿ£ŸÑŸäŸÜ',
        'king': 'ŸÉŸäŸÜÿ∫',
        'wright': 'ÿ±ÿßŸäÿ™',
        'scott': 'ÿ≥ŸÉŸàÿ™',
        'torres': 'ÿ™Ÿàÿ±Ÿäÿ≥',
        'nguyen': 'ŸÜÿ¨ŸàŸäŸÜ',
        'hill': 'ŸáŸäŸÑ',
        'flores': 'ŸÅŸÑŸàÿ±Ÿäÿ≥',
        'green': 'ÿ∫ÿ±ŸäŸÜ',
        'adams': 'ÿ¢ÿØÿßŸÖÿ≤',
        'nelson': 'ŸÜŸäŸÑÿ≥ŸàŸÜ',
        'baker': 'ÿ®ŸäŸÉÿ±',
        'hall': 'ŸáŸàŸÑ',
        'rivera': 'ÿ±ŸäŸÅŸäÿ±ÿß',
        'campbell': 'ŸÉÿßŸÖÿ®ŸÑ',
        'mitchell': 'ŸÖŸäÿ™ÿ¥ŸäŸÑ',
        'carter': 'ŸÉÿßÿ±ÿ™ÿ±',
        'roberts': 'ÿ±Ÿàÿ®ÿ±ÿ™ÿ≥',
        'gomez': 'ÿ∫ŸàŸÖŸäÿ≤',
        'phillips': 'ŸÅŸäŸÑŸäÿ®ÿ≥',
        'evans': 'ÿ•ŸäŸÅÿßŸÜÿ≤',
        'turner': 'ÿ™Ÿäÿ±ŸÜÿ±',
        'diaz': 'ÿØŸäÿßÿ≤',
        'parker': 'ÿ®ÿßÿ±ŸÉÿ±',
        'cruz': 'ŸÉÿ±Ÿàÿ≤',
        'edwards': 'ÿ•ÿØŸàÿßÿ±ÿØÿ≤',
        'collins': 'ŸÉŸàŸÑŸäŸÜÿ≤',
        'reyes': 'ÿ±ŸäŸäÿ≥',
        'stewart': 'ÿ≥ÿ™ŸäŸàÿßÿ±ÿ™',
        'morris': 'ŸÖŸàÿ±Ÿäÿ≥',
        'morales': 'ŸÖŸàÿ±ÿßŸÑŸäÿ≥',
        'murphy': 'ŸÖŸàÿ±ŸÅŸä',
        'cook': 'ŸÉŸàŸÉ',
        'rogers': 'ÿ±Ÿàÿ¨ÿ±ÿ≤',
        'gutierrez': 'ÿ∫Ÿàÿ™Ÿäÿ±Ÿäÿ≤',
        'ortiz': 'ÿ£Ÿàÿ±ÿ™Ÿäÿ≤',
        'morgan': 'ŸÖŸàÿ±ÿ∫ÿßŸÜ',
        'cooper': 'ŸÉŸàÿ®ÿ±',
        'peterson': 'ÿ®Ÿäÿ™ÿ±ÿ≥ŸàŸÜ',
        'bailey': 'ÿ®ÿßŸäŸÑŸä',
        'reed': 'ÿ±ŸäÿØ',
        'kelly': 'ŸÉŸäŸÑŸÑŸä',
        'howard': 'ŸáÿßŸàÿßÿ±ÿØ',
        'ramos': 'ÿ±ÿßŸÖŸàÿ≥',
        'kim': 'ŸÉŸäŸÖ',
        'cox': 'ŸÉŸàŸÉÿ≥',
        'ward': 'Ÿàÿßÿ±ÿØ',
        'richardson': 'ÿ±Ÿäÿ™ÿ¥ÿßÿ±ÿØÿ≥ŸàŸÜ',
        'watson': 'Ÿàÿßÿ™ÿ≥ŸàŸÜ',
        'brooks': 'ÿ®ÿ±ŸàŸÉÿ≥',
        'chavez': 'ÿ¥ÿßŸÅŸäÿ≤',
        'wood': 'ŸàŸàÿØ',
        'james': 'ÿ¨ŸäŸÖÿ≥',
        'bennett': 'ÿ®ŸäŸÜŸäÿ™',
        'gray': 'ÿ∫ÿ±ÿßŸä',
        'mendoza': 'ŸÖŸÜÿØŸàÿ≤ÿß',
        'ruiz': 'ÿ±ŸàŸäÿ≤',
        'hughes': 'ŸáŸäŸàÿ≤',
        'price': 'ÿ®ÿ±ÿßŸäÿ≥',
        'alvarez': 'ÿßŸÑŸÅÿßÿ±Ÿäÿ≤',
        'castillo': 'ŸÉÿßÿ≥ÿ™ŸäŸÑŸà',
        'sanders': 'ÿ≥ÿßŸÜÿØÿ±ÿ≤',
        'patel': 'ÿ®ÿßÿ™ŸäŸÑ',
        'myers': 'ŸÖÿßŸäÿ±ÿ≤',
        'long': 'ŸÑŸàŸÜÿ∫',
        'ross': 'ÿ±Ÿàÿ≥',
        'foster': 'ŸÅŸàÿ≥ÿ™ÿ±',
        'jimenez': 'ÿÆŸäŸÖŸäŸÜŸäÿ≤',
    };

    // Split the name into parts
    const nameParts = normalizedName.split(/\s+/);
    const translatedParts: string[] = [];

    for (const part of nameParts) {
        // Remove common titles
        const cleanPart = part.replace(/^(dr\.?|doctor|prof\.?|professor|mr\.?|mrs\.?|ms\.?)$/i, '').trim();

        if (cleanPart && nameTranslations[cleanPart]) {
            translatedParts.push(nameTranslations[cleanPart]);
        } else if (cleanPart) {
            // If no translation found, keep original (might be already in Arabic)
            translatedParts.push(part);
        }
    }

    const result = translatedParts.length > 0 ? translatedParts.join(' ') : doctorName;
    console.log('üë®‚Äç‚öïÔ∏è Doctor name translation result:', { original: doctorName, translated: result });
    return result;
};
